<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端旅途</title>
  <icon>https://www.gravatar.com/avatar/ee411469dec2750994b2197b0abb0a43</icon>
  <subtitle>在读大学生一枚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jmu.name/"/>
  <updated>2018-06-14T12:20:26.214Z</updated>
  <id>http://jmu.name/</id>
  
  <author>
    <name>LaoJI</name>
    <email>1762648394@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http协议</title>
    <link href="http://jmu.name/2018/06/14/http%E5%8D%8F%E8%AE%AE/"/>
    <id>http://jmu.name/2018/06/14/http协议/</id>
    <published>2018-06-14T02:49:01.000Z</published>
    <updated>2018-06-14T12:20:26.214Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h3 id="http简介"><a href="#http简介" class="headerlink" title="http简介"></a>http简介</h3></li></ol><p>http（超文本传输协议）是一个基于<strong>请求与响应</strong>模式的、<strong>无状态</strong>的、<strong>应用层</strong>的协议</p><p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fsamnfvuvnj30fb051glp.jpg" alt=""></p><ol><li><h3 id="url详解"><a href="#url详解" class="headerlink" title="url详解"></a>url详解</h3></li></ol><p>百度搜索的一个url地址：<a href="https://www.baidu.com/s?name=value" target="_blank" rel="noopener">https://www.baidu.com/s?name=value</a></p><p>1.http/https:         协议类型</p><p>2.host：主机地址或域名</p><ul><li>​    –192.168.x.xx:8080      地址+端口号<br>   ​    –www.xxx.com             域名<br>   ​    –localhost8080            localhost是本机地址</li></ul><p>3.port:端口号              （默认端口是80可以省略）</p><p>4.path:                       请求的路径（host之后，问号？之前）</p><p>5.?  :                            问号是分割符号</p><p>6.参数：                      name=value</p><p>7.&amp;   ：                          多个参数用&amp;隔开     </p><ol><li><p>Get和Post（采用fiddler软件分析）</p><h4 id="Get没有请求body"><a href="#Get没有请求body" class="headerlink" title="Get没有请求body    "></a>Get没有请求body    <img src="" alt="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fsaz286xmvj30fy08rdj7.jpg"></h4><h4 id="Post有请求body（当然请求body也可以为空）"><a href="#Post有请求body（当然请求body也可以为空）" class="headerlink" title="Post有请求body（当然请求body也可以为空）"></a>Post有请求body（当然请求body也可以为空）<img src="" alt="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fsaz286hcjj30ft0883z4.jpg"></h4></li><li><p>其他请求方法</p><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT,  DELETE, TRACE 和 CONNECT 方法。</p><ul><li>GET 请求指定的页面信息，并返回实体主体。 </li><li>HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头 </li><li>POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 </li><li>PUT 从客户端向服务器传送的数据取代指定的文档的内容。 </li><li>DELETE 请求服务器删除指定的页面。 </li><li>CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。 </li><li>OPTIONS 允许客户端查看服务器的性能。 </li><li>TRACE 回显服务器收到的请求，主要用于测试或诊断。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;http简介&quot;&gt;&lt;a href=&quot;#http简介&quot; class=&quot;headerlink&quot; title=&quot;http简介&quot;&gt;&lt;/a&gt;http简介&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;http（超文本传输协议）是一个基于&lt;strong&gt;请求与响应&lt;/
      
    
    </summary>
    
      <category term="协议" scheme="http://jmu.name/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="Http" scheme="http://jmu.name/tags/Http/"/>
    
      <category term="面试" scheme="http://jmu.name/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python编码</title>
    <link href="http://jmu.name/2017/05/29/python%E7%BC%96%E7%A0%81/"/>
    <id>http://jmu.name/2017/05/29/python编码/</id>
    <published>2017-05-29T01:09:44.000Z</published>
    <updated>2017-05-29T01:44:29.788Z</updated>
    
    <content type="html"><![CDATA[<ol><li>计算机只能处理数字，文本转换为数字才能处理。计算机中8个bit作为一个字节，所以一个字节能表示最大的数字就是255</li><li>计算机是美国人发明的，所以一个字节可以表示所有字符了，所以ASCII(一个字节)编码就成为美国人的标准编码</li><li>但是ASCII处理中文明显是不够的，中文不止255个汉字，所以中国制定了GB2312编码，用两个字节表示一个汉字。如果遇到生僻的汉字可以采用3个及3个以上编码。GB2312还把ASCII包含进去了。同理，日文，韩文等上百个国家都发展了一套自己语言的字节的编码。标准越来越多，所以如果在一篇文章中出现多种语言混合显示就一定会出现乱码。</li><li>于是unicode（16bit or 32 or 64）出现了，将所有语言统一到一套编码里</li><li>看一下ASCII和unicode编码：    <ol><li>字母A用ASCII编码十进制是65，二进制为0100 0001</li><li>汉字”中”以及超出了ASCII编码的范围，用unicode编码20013 二进制是01001110 00101101</li><li>A用unicode编码只需要前面补0 二进制是00000000 0100 0001</li></ol></li></ol><p>6.乱码问题解决了，但是如果内容全是英文，unicode编码比ASCII需要多一倍的存储空间，同时如果传输 那就需要多一倍的传输。</p><p>7.所以出现了可变长的编码 “utf-8”.它把英文变为一个字节编码，汉字3个字节，特别生僻的变成4-6字节,如果传输大量的英文，utf-8作用就很明显了</p><hr><p><strong>python3中已经把所有字符串默认成unicode编码了</strong></p><p>python2需要分析下</p><p>在windows系统中，字符串默认是GB2312的，linux中默认是utf-8<br>而python2中想像下图中使用encode(“utf8”)编码，必须先编码成unicode才行<br>所以，可以采用 先解码 在编码<br>即s.decode(“gb2312”).encode(“utf-8”)</p><p>在linux中即s.decode(“utf-8”).encode(“utf-8”)</p><p>原理分析<br>因为我们在.encode的时候，它首先会默认用系统自带encoding去decode<br>而linux里的是下面ASCII编码。所以必当报错</p><p>python2在文件头加上# -<em>- coding: -</em>- 就可以识别文件中的中文了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;计算机只能处理数字，文本转换为数字才能处理。计算机中8个bit作为一个字节，所以一个字节能表示最大的数字就是255&lt;/li&gt;
&lt;li&gt;计算机是美国人发明的，所以一个字节可以表示所有字符了，所以ASCII(一个字节)编码就成为美国人的标准编码&lt;/li&gt;
&lt;li&gt;但
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jmu.name/2017/03/27/hello-world/"/>
    <id>http://jmu.name/2017/03/27/hello-world/</id>
    <published>2017-03-27T03:10:17.436Z</published>
    <updated>2017-03-09T12:16:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>从头开始。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从头开始。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3day2</title>
    <link href="http://jmu.name/2017/03/16/CSS3day2/"/>
    <id>http://jmu.name/2017/03/16/CSS3day2/</id>
    <published>2017-03-16T10:25:16.000Z</published>
    <updated>2017-03-16T10:38:22.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、边框"><a href="#1、边框" class="headerlink" title="1、边框"></a>1、边框</h1><pre><code>边框圆角：      border-radius:30px;    border-radius:30px 40px 50px 60px;    赋值规律： 从左上开始，顺时针赋值，如果这个角没有值 ，去对角；    border-radius: 40px/60px;边框阴影：    box-shadow: 水平位移  垂直位移  模糊程度  阴影大小  阴影颜色  外/内阴影(inset)边框图片：    border-image-source: 图片路径    border-image-slice: 裁剪    border-image-width: 边框宽度    border-image-repeat: 边框图片的平铺        repeat:  图片显示不完整        round: 图片平铺 优化了，图片会完整显示        stretch: 拉伸2、背景：    背景可以改变大小，可以有多个背景    background-size:  30px 30px;    background-size:  30% 30%;    background-size:  cover; 覆盖    background-size:  contain; 包含    可以有多个背景:        多个背景按照正常的语法格式书写，每个背景使用逗号隔开   背景原点：     background-origin:         content-box         padding-box         border-box   背景裁剪     background-clip:         content-box         padding-box         border-box3、渐变    线性渐变：        background-image: linear-gradient(方向，起始颜色，终止颜色);        方向：to left right bottom top   35deg    径向渐变：        radial-gradient（辐射半径 中心点位置，起始颜色，终        止颜色）          中心点颜色，at left，right，top，bottom，center        at 50px（水平距离） 50px（垂直距离） 4、过渡     /* 过渡属性*        /*transition:width 2s,background-color 2s;*/        /* 如果多个过度的 特性是一样的 可以简写*/        /* transition: 过渡属性 持续时间  运动曲线 延迟时间*/        transition:all 4s linear 1s ;        /* 过渡必须加给盒子本身*/        /* 过渡的属性详解*/        transition：过渡属性 过渡时间 速度曲线（linear：匀速） 延迟时间        transition-property：过渡属性        transition-duration：过渡持续时间        transition-timimg-function：运动曲线        linear：匀速        ease：减速        ease-in：加速        ease-out：减速        ease-in-out：先加速后减速        transition-delay：过渡延迟        如果需要所有属性都过渡        transition-property：all；    5、2D变换　    transform    缩放、旋转、移动    变换后不会影响其他盒子    缩放scale（倍率）    不可以写百分数    大于1是放大，小于一缩小    写一个值，宽高等比缩放    内容也会等比缩放    写两个值，第一个是水平缩放倍率，第二个是垂直缩放倍率    位移translate（）    右移正数，左移负数（右下为正，左下为负）    第一个值水平移动，第二个值垂直移动距离    可写百分比数值，相对与自身的尺寸    盒子在父盒子中居中方法        position：absolute；    left：50%；    transform：translate（-50%）；    旋转：rotate（角度）    正值顺时针，负值逆时针    旋转中心：transform-origin：水平坐标 垂直坐标    默认旋转中心：几何中心</code></pre><blockquote><p><a href="https://github.com/IMLaoJI/CSS3day2" target="_blank" rel="noopener">学习案列</a>        </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、边框&quot;&gt;&lt;a href=&quot;#1、边框&quot; class=&quot;headerlink&quot; title=&quot;1、边框&quot;&gt;&lt;/a&gt;1、边框&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;边框圆角：  
    border-radius:30px;
    border-radius:30px
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js之基础(一）</title>
    <link href="http://jmu.name/2017/03/13/js%E4%B9%8B%E5%9F%BA%E7%A1%80-%E4%B8%80%EF%BC%89/"/>
    <id>http://jmu.name/2017/03/13/js之基础-一）/</id>
    <published>2017-03-13T11:37:47.000Z</published>
    <updated>2017-03-13T11:52:47.663Z</updated>
    
    <content type="html"><![CDATA[<p>先复习点基础的css和html知识。<br>1、如何的给我们的HTML结构增加CSS样式<br>  1)<strong>行内样式</strong> -&gt;直接的在HTML标签上增加style=’….样式都写在这里<br>    <figure class="highlight plain"><figcaption><span>src</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">    应用于单独的给某一个元素增加样式(一般在写css样式的时候我们都     不用)  </span><br><span class="line"></span><br><span class="line">  2)**内嵌样式** -&gt;在HEAD中增加style标签,然后把需要给元素设置的样式都写在style里面</span><br><span class="line"></span><br><span class="line">  3)**外联样式** -&gt;为了让HTML页面中的标签和我们的样式分离开，我们把样式写在一个外部的文件中，然后在通过link引入进来  </span><br><span class="line">  `&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;css/test1.css&quot;/&gt;`</span><br><span class="line"></span><br><span class="line">  4)**导入式** -&gt;和外链式相同，都是把样式文件写在外面，然后通过@import导入进来  </span><br><span class="line">   `@import &quot;css/test2.css&quot;;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JS中常用的几种输出方式 #</span><br><span class="line">## 1、alert(&quot;我们要输出的内容&quot;)  ## </span><br><span class="line">  -&gt;在浏览器中弹出一个对话框,然后把要输出的内容展示出来  </span><br><span class="line">  -&gt;alert都是把要输出的内容首先转换为字符串然后在输出的  </span><br><span class="line"></span><br><span class="line">## 2、document.write(&quot;我们要输出的内容&quot;) ##  </span><br><span class="line">  -&gt;直接的在页面中展示我们输出的内容  </span><br><span class="line"></span><br><span class="line">## 3、console.log(我们要输出的内容) ##  </span><br><span class="line">  -&gt;在控制台输出我们的内容  </span><br><span class="line">  -&gt;如何打开/查看控制台 -&gt;所有的浏览器都是F12这个键打开，拿谷歌浏览器来说，控制台包含了很多项：  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Elements:展示的是我们页面中的HTML结构,但是它最主要的功能就是</span><br><span class="line">随时的调试我们的css样式(等价于火狐浏览器中的fire bug)  </span><br><span class="line"></span><br><span class="line">Console:我们在控制台输出的内容都可以在这里查看,不仅如此,我该</span><br><span class="line">可以在这里编写js代码</span><br><span class="line">Sources:我们网站中的CSS/JS/HTML所有页面的文件都在这里可以下</span><br><span class="line">载查看,可以通过这个扒别人的源码</span><br><span class="line">Network:展示了页面所有的加载资源(CSS/JS/img/Ajax/</span><br><span class="line">JSONP...)，并且每一个资源文件加载的时间都能看到,</span><br><span class="line">通过这个我们可以进行页面的性能优化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line">  -&gt;console.dir(我们要输出的内容) 这种方式比.log输出的内容更加的详细</span><br><span class="line">  -&gt;console.table</span><br><span class="line"></span><br><span class="line">&gt; [这里对console.table讲的很清楚](http://www.cnblogs.com/justany/p/3429097.html &quot;去看看吧&quot;)</span><br><span class="line"></span><br><span class="line">## 4、value ##</span><br><span class="line">  -&gt;给文本框(表单元素)赋值内容  </span><br><span class="line">  -&gt;获取文本框中(表单元素)的内容 </span><br><span class="line">  document.getElementById(&quot;search&quot;).value = &quot;我们要给#search这个文本框添加的内容&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5、innerHTML/innerText ##</span><br><span class="line">  -&gt;给除了表单元素的标签赋值内容  </span><br><span class="line"></span><br><span class="line">    document.getElementById(&quot;div1&quot;).innerHTML = &quot;勿忘初心方</span><br><span class="line">得始终~~&quot;;</span><br><span class="line">    document.getElementById(&quot;div1&quot;).innerText = &quot;在没有努力</span><br><span class="line">之前不要谈天赋和基础~~&quot;;</span><br><span class="line"></span><br><span class="line">### innerHTML和innerText的区别 ##</span><br><span class="line"></span><br><span class="line">    1)innerHTML在赋值的时候,如果遇到了有效的HTML标签会把它当做真</span><br><span class="line">正的标签处理,标签就可以起到自己的作用了；innerText不管是不是</span><br><span class="line">标签都当做文本来赋值，那么看到的都是文本，标签起不到自己的作</span><br><span class="line">用；(总结：在赋值的时候innerHTML可以识别HTML标签，而</span><br><span class="line">innerText不能识别)</span><br></pre></td></tr></table></figure></p><pre><code>document.getElementById(&quot;div1&quot;).innerHTML = &quot;&lt;a href=&apos;http://www.zhufengpeixun.cn/&apos;&gt;珠峰培训的官网&lt;/a&gt;&quot;;document.getElementById(&quot;div1&quot;).innerText = &quot;&lt;a href=&apos;http://www.zhufengpeixun.cn/&apos;&gt;珠峰培训的官网&lt;/a&gt;&quot;;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    2)在部分火狐浏览器中，不支持innerText,而innerHTML是所有浏览</span><br><span class="line">器都支持的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 思考题：script上除了type属性还有哪些常用的属性?  </span><br><span class="line"> defer async</span><br><span class="line"></span><br><span class="line">JS:JavaScript的一个缩写,它是一门轻量级的脚本&quot;编程语言&quot;,它是由三部分组成的:  </span><br><span class="line">ECMAScript:定义了JS的基本语法、命名规范、变量、数据类型、操作语句...最为基础也是最为核心的知识</span><br><span class="line"></span><br><span class="line">DOM: document object model 文档对象模型 -&gt;提供了JS操作页面中元素的常用方法和属性(例如:getElementById就是DOM提供的一个获取元素的方法)</span><br><span class="line"></span><br><span class="line">BOM: browser object model 浏览器对象模型 -&gt;提供了JS操作浏览器的一些相关的属性和方法(例如:我们可以监听浏览器的关闭事件,在关闭的时候做一些自己的事情)</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line"></span><br><span class="line">var num = 12;</span><br><span class="line">var str = &quot;LaoJI&quot;;</span><br><span class="line">var boo = true;//false</span><br><span class="line">var n = null;</span><br><span class="line">var u = undefined;</span><br><span class="line"></span><br><span class="line">var obj = &#123;name: &quot;LaoJI&quot;, age: 25&#125;;//对象</span><br><span class="line"></span><br><span class="line">var ary = [12, 23, 34, 45];//数组</span><br><span class="line">var reg = /^[+-]?(\d|([1-9]\d+))(\.\d+)?$/;//正则  </span><br><span class="line"></span><br><span class="line">var fn = function () &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">1、JS中的数据类型一共分为两大类</span><br><span class="line">[基本数据类型/值类型]</span><br><span class="line">number、string、boolean、null、undefined</span><br><span class="line"></span><br><span class="line">[引用数据类型]</span><br><span class="line">object对象数据类型[&#123;&#125;对象、[]数组、/^$/正则...]</span><br><span class="line">function函数数据类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、用JS检测它到底是说什么数据类型的</span><br><span class="line">1)typeof 用来检测数据类型的逻辑运算符</span><br><span class="line"></span><br><span class="line">typeof value; -&gt;检测value这个值的数据类型</span><br><span class="line">console.log(typeof 12);//-&gt;&quot;number&quot; 在控制台看到的是没有加&quot;&quot;，这是浏览器的一个机制,在JS中输出,在控制台默认的把&quot;&quot;给省略了</span><br><span class="line">返回值:首先是一个字符串,其次里面才包含了我们对应的数据类型,例如:&quot;number&quot;、&quot;string&quot;、&quot;boolean&quot;、&quot;object&quot;、&quot;function&quot;、&quot;undefined&quot;...</span><br><span class="line">注意:</span><br><span class="line">console.log(typeof null);//-&gt;&quot;object&quot;</span><br><span class="line">typeof不能具体的细分object下的数组、正则、对象，因为不管检测哪一个返回的都是&quot;object&quot;,例如：typeof [12] -&gt;&quot;object&quot;  typeof /^$/ -&gt;&quot;object&quot;</span><br><span class="line"></span><br><span class="line">BAT面试题</span><br><span class="line">console.log(typeof typeof typeof typeof [12, 23, 34]);//-&gt;&quot;string&quot;</span><br><span class="line"></span><br><span class="line"> typeof检测的返回值不管是啥，首先都是一个字符串，如果出现两个及以上同时检测的话，最后结果一秒钟出答案-&gt;&quot;string&quot;</span><br><span class="line"> typeof [12, 23, 34] -&gt; &quot;object&quot;</span><br><span class="line"> typeof &quot;object&quot; -&gt; &quot;string&quot;</span><br><span class="line"> typeof &quot;string&quot; -&gt; &quot;string&quot;</span><br><span class="line"> typeof &quot;string&quot; -&gt; &quot;string&quot;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2)instanceof 判断某一个实例是否属于这个类</span><br><span class="line">3)constructor 通过实例的构造函数的执行检测数据类型</span><br><span class="line">4)Object.prototype.toString.call() 调用Object基类原型上的toString方法，让里面的this变为我们要检测值，由此返回对应的数据类型</span><br></pre></td></tr></table></figure> 自然界中的有效数字：正数、负数、零、小数1、JS中也有一个非常变态的也是数字:NaNNaN:not a number 不是一个数1)但是它是number类型的 typeof NaN -&gt;&quot;number&quot;2)由于NaN包含的内容太广泛了,所以NaN和NaN是不相等的 NaN==NaN -&gt;false2、将其他数据类型的值转化为number类型1)Number(value) 严格强制的把value转化为number类型值Number(&quot;100&quot;) -&gt; 100Number(&quot;100px&quot;) -&gt; NaN  严格:对于一个字符串来说,只有所有的字符都是有效的数字才能转化为数字，只要有一个字符不是，结果就是NaNNumber(&quot;&quot;) -&gt; 02)parseInt/parseFloat 非严格转换，把其他数据值转换为数字类型的parseInt(&quot;100px&quot;) -&gt; 100 从左到右查找有效的数字字符,然后把找到的转换为数字，一但遇到一个非有效数字的字符，则停止查找(不管后面是否还有数字都不在找了)parseInt(&quot;100px200&quot;) -&gt; 100parseInt(&quot;px100&quot;) -&gt; NaN  如果一个都没有找到的话，结果就是NaNparseInt(&quot;100.5px&quot;) -&gt; 100  parseFloat(&quot;100.5px&quot;) -&gt; 100.5 parseFloat比parseInt多识别一个小数点3、我可以通过判断 &quot;wee&quot;==NaN 如果相等,就说明&quot;wee&quot;不是一个有效数字吗? -&gt;不能，因为NaN和自己都不相等，它和任何一个值都不是相等的在JS中提供了一个检测是否为有效数字的方法-&gt;isNaN(value) 检测value是否为一个有效的数字，如果是有效的数字返回false，如果不是有效数字才返回trueisNaN(12) -&gt;false 说明12是一个有效的数字isNaN(&quot;12&quot;) -&gt;false 说明“12”是一个有效的数字，当检测的时候，检测的值不是一个number类型的，我们首先转换为number类型，然后在进行判断4、保留小数点后面的位数 -&gt; toFixedconsole.log(3.141592654.toFixed(2));//-&gt;&quot;3.14&quot;=:赋值 右边是值,左边是我们的变量,把值赋值给变量var num = 12;//把12赋值给变量num num=12var num2 = num;//把num这个变量存储(代表)的值赋值给变量num2 num2=12==:比较 判断左边和右边是否相等,相等的话返回的结果是true,不相等返回的结果是false12==12 -&gt; true&quot;12&quot;==12 -&gt; true在==进行比较的时候，首先会判断左右两边的数据类型是否一致，如果数据类型相同则继续比较值；如果左右两边的数据类型不一样，浏览器会默认的把它们转换成一样的数据类型才比较；例如：&quot;12&quot;==12 左边是个字符串，右边是一个数字，浏览器首先会把左边的字符串转换为数字12,然后在和右边比较浏览器是如和的把字符串转化为数字的? -&gt; Number(&quot;12&quot;)除了字符串和数字以外，其他的数据类型在进行比较的时候，是如何的转换的呢? -&gt;免费课教材最后一页 7.2附表===:绝对比较 如果遇到两边的数据类型不一行的话，返回的结果就是不相等，不会像==一样进行数据类型的转换BAT实战面试题:   var num = parseInt(&quot;px100&quot;);//-&gt;num=NaN   if (num == 100) {       console.log(100);   } else if (num == NaN) {       console.log(NaN);   } else if (typeof num === &quot;number&quot;) {//typeof NaN -&gt;&quot;number&quot;       console.log(&quot;number&quot;);   } else {       console.log(&quot;啥也不是&quot;);   }   //-&gt;&quot;number&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先复习点基础的css和html知识。&lt;br&gt;1、如何的给我们的HTML结构增加CSS样式&lt;br&gt;  1)&lt;strong&gt;行内样式&lt;/strong&gt; -&amp;gt;直接的在HTML标签上增加style=’….样式都写在这里&lt;br&gt;    &lt;figure class=&quot;highli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML5(一)</title>
    <link href="http://jmu.name/2017/03/13/HTML5-%E4%B8%80/"/>
    <id>http://jmu.name/2017/03/13/HTML5-一/</id>
    <published>2017-03-13T10:53:43.000Z</published>
    <updated>2017-03-13T11:32:40.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、HTML5"><a href="#1、HTML5" class="headerlink" title="1、HTML5:"></a>1、HTML5:</h1><pre><code>HTML4.1  网页开发：      结构: html4.0      样式：css css2      行为：js  HTML5:　是HTML4的升级版本(狭义)      结构：html5      样式：css3      行为：js API 有所增强  地理定位 web存储 拖拽  </code></pre><blockquote><p>HTML5广义的概念: 代表着浏览器技术发展的一阶段，HTML5+CSS3+js API 一套前端技术的组合；</p><p><a href="https://github.com/HeyGary/HTML5DayOne/tree/master/01-%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">案列</a></p></blockquote><h1 id="2、新增语义化标签"><a href="#2、新增语义化标签" class="headerlink" title="2、新增语义化标签"></a>2、新增语义化标签</h1><pre><code>header 头部  nav  导航  section  区域  aside  侧边栏  article 文章  footer 底部  progress  进度条  </code></pre><blockquote><p><a href="https://github.com/HeyGary/HTML5DayOne/tree/master/02-%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">案列</a></p></blockquote><h1 id="3、表单"><a href="#3、表单" class="headerlink" title="3、表单"></a>3、表单</h1><p>   表单类型： type=”text”<br>   email<br>   tel<br>   url<br>   search<br>   number  step:步长<br>   color<br>   range  value   max min<br>   time<br>   date<br>   month<br>   week  </p><p>   <strong>有兼容性问题</strong></p><blockquote><p><a href="https://github.com/HeyGary/HTML5DayOne/tree/master/03-%E6%99%BA%E8%83%BD%E8%A1%A8%E5%8D%95" target="_blank" rel="noopener">案列</a></p></blockquote><h1 id="表单元素："><a href="#表单元素：" class="headerlink" title="表单元素："></a>表单元素：</h1><p>   ``` </p><pre><code>&lt;input type=&quot;search&quot; list=&quot;sex&quot;/&gt;数据列表&lt;datalist id=&quot;sex&quot;&gt;    &lt;option&gt;男&lt;/option&gt;    &lt;option&gt;男&lt;/option&gt;    &lt;option&gt;男&lt;/option&gt;&lt;/datalist&gt;&lt;output&gt;&lt;/output&gt;  输出信息&lt;keygen/&gt;   生成密钥的 用于表单安全传输&lt;meter&gt;&lt;/meter&gt; 度量器  max   min  value  low  high&lt;progress&gt;&lt;/progress&gt; 进度条  max   min  value表单属性：placeholder:提示文字autofocus:自动聚焦autocomplete：自动完成（填充）  on 开启（默认）   off 取消提示required:必填multiple: 多选novalidate: 关闭表单的默认验证功能 用于formpattern:  自定义正则验证 pattern=&quot;\D+&quot;;表单事件：oninput:当用户输入时 触发oninvalid:当验证不通过是触发--&gt;设置验证不通过时的提示文字</code></pre><p>`</p><blockquote><p><a href="https://github.com/HeyGary/HTML5DayOne/tree/master/03-%E6%99%BA%E8%83%BD%E8%A1%A8%E5%8D%95" target="_blank" rel="noopener">案列</a></p></blockquote><h1 id="4、多媒体"><a href="#4、多媒体" class="headerlink" title="4、多媒体"></a>4、多媒体</h1><pre><code>之前：    在网页上播放 多媒体 必须依赖于第三方 插件    mediaplay:    快播：    falsh插件：    H5里面提供了 视频 和 音频的标签    audio  video</code></pre><blockquote><p><a href="https://github.com/HeyGary/HTML5DayOne/tree/master/04-%E5%A4%9A%E5%AA%92%E4%BD%93" target="_blank" rel="noopener">案列</a></p></blockquote><h1 id="5、DOM拓展"><a href="#5、DOM拓展" class="headerlink" title="5、DOM拓展"></a>5、DOM拓展</h1><pre><code>document 对象    文档对象当在浏览器中 打开一个页面后， 浏览器首先会来解析我们的 网页，把解析出来的数据，存放到一个DOM对象中；document.getElmentById();在H5中 DOM新增的功能：jquery---$(&apos;.box&apos;);$(&apos;#box&apos;);$(&apos;div.box);$(&apos;div p&apos;);</code></pre><blockquote><p><a href="https://github.com/HeyGary/HTML5DayOne/tree/master/05-DOM%E6%8B%93%E5%B1%95" target="_blank" rel="noopener">案列</a></p></blockquote><h1 id="获取单个元素："><a href="#获取单个元素：" class="headerlink" title="获取单个元素："></a>获取单个元素：</h1><pre><code>document.querySelector(&apos;.box‘);获取所有符合条件的元素：  返回的数组document.querySeletorAll(&apos;.box&apos;);控制类名的API：node.classList.add();添加类名node.classList.remove()；删除类名node.classlist.contains();判断是否包含指定的类名node.classList.toggle()；切换指定的类名</code></pre><blockquote><p><a href="https://github.com/HeyGary/HTML5DayOne/tree/master/05-DOM%E6%8B%93%E5%B1%95" target="_blank" rel="noopener">案列</a></p><p>综合案列tab标签  <a href="https://github.com/HeyGary/HTML5DayOne/tree/master/05-DOM%E6%8B%93%E5%B1%95/%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener">Tab栏练习</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、HTML5&quot;&gt;&lt;a href=&quot;#1、HTML5&quot; class=&quot;headerlink&quot; title=&quot;1、HTML5:&quot;&gt;&lt;/a&gt;1、HTML5:&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;HTML4.1  
网页开发：  
    结构: html4.0  
    
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3之选择器</title>
    <link href="http://jmu.name/2017/03/12/CSS3%E4%B9%8B%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://jmu.name/2017/03/12/CSS3之选择器/</id>
    <published>2017-03-12T10:10:54.000Z</published>
    <updated>2017-03-12T12:37:15.301Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3刚接触。我尽量把我学习过程分享给大家。大家有啥问题评论下哈。</p><pre><code>div&gt;p: 子代div+p： div后面相邻的第一个pdiv~p: div后面所有的兄弟p</code></pre><blockquote><p><a href="https://github.com/HeyGary/CSS3day1/blob/master/01-css3%E9%80%89%E6%8B%A9%E5%99%A8/01-%E4%B9%8B%E5%89%8D%E5%AD%A6%E8%BF%87%E7%9A%84%E9%80%89%E6%8B%A9%E5%99%A8.html" target="_blank" rel="noopener">案列</a></p></blockquote><h1 id="1、属性选择器："><a href="#1、属性选择器：" class="headerlink" title="1、属性选择器："></a>1、属性选择器：</h1><pre><code>id选择器    #     通过id 来选择  类名选择器  .     通过类名来选择  属性选择器  []    通过标签属性来选择器  语法：标志性符号：[]^: 开头  $:结尾  *：包含E[title]  : 选中页面的E元素，并且E需要带有title属性E[title=&quot;abc&quot;] :选中页面的E元素，并且E需要带有title属性,属性值为abcE[title^=&quot;abc&quot;] :选中页面的E元素，并且E需要带有title属性,属性值以abc开头E[title$=&quot;abc&quot;] :选中页面的E元素，并且E需要带有title属性,属性值以abc结尾E[title*=&quot;abc&quot;] :选中页面的E元素，并且E需要带有title属性,属性值包含abc</code></pre><blockquote><p><a href="https://github.com/HeyGary/CSS3day1/blob/master/01-css3%E9%80%89%E6%8B%A9%E5%99%A8/02-%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.html" target="_blank" rel="noopener">案列</a></p><h1 id="结构伪类选择器："><a href="#结构伪类选择器：" class="headerlink" title="结构伪类选择器："></a>结构伪类选择器：</h1><pre><code> E：first-child　选中父元素中的第一个子元素 E：last-child　选中父元素中的最后一个子元素 E：nth-child(1)　选中父元素中的第5个子元素  n: 0,1,2,3,4。。。  偶数： 2n  even  奇数：2n-1 odd  前5个： -n+5E：nth-last-child(3): 从后向前选择， 选中倒数第3个</code></pre></blockquote><pre><code> div:nth-child(9) 注意：所选到的元素的类型 必须是指定的类型E,否则选择无效；E：empty 表示元素为空的状态E:target: 表示元素被激活的状态  要配合锚点使用</code></pre><blockquote><p><a href="https://github.com/HeyGary/CSS3day1/tree/master/01-css3%E9%80%89%E6%8B%A9%E5%99%A8" target="_blank" rel="noopener">案列</a></p><h1 id="伪元素："><a href="#伪元素：" class="headerlink" title="伪元素："></a>伪元素：</h1><pre><code>通过css模拟出html效果E::beforeE::after  必须有content 属性</code></pre><p><a href="https://github.com/HeyGary/CSS3day1/blob/master/01-css3%E9%80%89%E6%8B%A9%E5%99%A8/08-%E4%BC%AA%E5%85%83%E7%B4%A0before%E5%92%8Cafter.html" target="_blank" rel="noopener">案列</a></p><h1 id="伪元素选择器："><a href="#伪元素选择器：" class="headerlink" title="伪元素选择器："></a>伪元素选择器：</h1><pre><code>E::first-letter　选中第一个字母E::first-line选中第一行E::selection: 表示选择的区域 通过设置 color  background</code></pre><p><a href="https://github.com/HeyGary/CSS3day1/blob/master/01-css3%E9%80%89%E6%8B%A9%E5%99%A8/09-first-letter.html" target="_blank" rel="noopener">案列</a></p></blockquote><h1 id="CSS3中新增了两种颜色模式-："><a href="#CSS3中新增了两种颜色模式-：" class="headerlink" title="CSS3中新增了两种颜色模式 ："></a>CSS3中新增了两种颜色模式 ：</h1><pre><code>RGBA:    red  green blue (0-255)   alpha: 透明度 （0-1）HSLA:    H:色调  0-360   0 红色 120 绿色 240 蓝色    S:饱和度 0%-100%      L:亮度    0%-100%        A：alpha 透明度 0-1      text-shadow:水平位移 垂直位移 模糊度 颜色盒子模型：    三个盒子： content-box   padding-box  border-box    box-sizing: border-box(内减模式)border-box(内减模式) /content-box（外加模式）(默认值)   box-sizing: border-box   盒模型 私有化前缀：     浏览器私有化前缀：        -webkit-: 谷歌 苹果        -moz-:火狐        -ms-：ie        -o-：欧朋</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS3刚接触。我尽量把我学习过程分享给大家。大家有啥问题评论下哈。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;div&amp;gt;p: 子代
div+p： div后面相邻的第一个p
div~p: div后面所有的兄弟p
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A pageDemo</title>
    <link href="http://jmu.name/2017/03/11/A-pageDemo/"/>
    <id>http://jmu.name/2017/03/11/A-pageDemo/</id>
    <published>2017-03-11T02:19:36.000Z</published>
    <updated>2017-03-11T02:22:00.569Z</updated>
    
    <content type="html"><![CDATA[<p>#学完css后做的一个小小的主页demo(浏览者莫喷啦)#<br>下面图解主页面的盒子模型</p><h1 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h1><p><img src="http://i.imgur.com/5WiCkPZ.png" alt=""></p><h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><p><img src="http://i.imgur.com/gjy98s9.png" alt=""></p><h1 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h1><p><img src="http://i.imgur.com/khMXcD9.png" alt=""></p><h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><p><img src="http://i.imgur.com/KJN9Kfw.png" alt=""></p><h1 id="底部"><a href="#底部" class="headerlink" title="底部"></a>底部</h1><p><img src="http://i.imgur.com/ZiqoQCq.png" alt=""></p><p>源码请左转-&gt;</p><blockquote><p><a href="https://github.com/HeyGary/pagedemo/" title="有点丑" target="_blank" rel="noopener">https://github.com/HeyGary/pagedemo/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#学完css后做的一个小小的主页demo(浏览者莫喷啦)#&lt;br&gt;下面图解主页面的盒子模型&lt;/p&gt;
&lt;h1 id=&quot;头部&quot;&gt;&lt;a href=&quot;#头部&quot; class=&quot;headerlink&quot; title=&quot;头部&quot;&gt;&lt;/a&gt;头部&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo站点之域名配置(GitHub)</title>
    <link href="http://jmu.name/2017/03/10/Hexo%E7%AB%99%E7%82%B9%E4%B9%8B%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE-GitHub/"/>
    <id>http://jmu.name/2017/03/10/Hexo站点之域名配置-GitHub/</id>
    <published>2017-03-10T13:25:10.000Z</published>
    <updated>2017-03-10T13:39:12.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p> <strong>因为Hexo个人博客是托管在github之上，每次访问都要使用githubname.github.io这么一个长串的域名来访问，会显得非常繁琐。这个时候我们可以购买一个域名，设置DNS跳转，以达到通过域名即可访问我们的个人博客。通过查阅文档发现，github pages是支持域名绑定的。</strong></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul><li><p>购买域名</p><ul><li>腾讯云、阿里云都是不错的选择。博主选用的是腾讯云的</li><li>建议如果只是作为自己的博客使用建议不要购买.com的域名（辣么贵）</li></ul></li><li><p>域名解析</p><ul><li>这里没图我说个**</li><li>先登录腾讯云</li><li><img src="http://i.imgur.com/FvRimDE.png" alt=""></li><li><img src="http://i.imgur.com/obThx92.png" alt=""></li><li><img src="http://i.imgur.com/mTfmVDj.png" alt=""></li><li><strong>点击添加解析，记录类型选A或CNAME，A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是heygary.github.io</strong></li><li><img src="http://i.imgur.com/28XpWeL.png" alt=""></li></ul></li></ul><hr><ul><li><strong>这些全部设置完成后，此时你并不能要申请的域名访问你的博客。接着你需要做的是在hexo根目录的source文件夹里创建CNAME文件，不带任何后缀，里面添加你的域名信息，如：jmu.name。实践证明如果此时你填写的是www.jmu.name那么以后你只能用www.jmu.name访问，而如果你填写的是jmu.name。那么用www.jmu.name和jmu.name访问都是可以的。重新清理hexo(hexo clean命令),并发布即可用新的域名访问。</strong></li></ul><hr><ul><li><strong>搭建完成访问出现404 可能的原因是：<br>绑定了个人域名，但是域名解析错误。<br>域名解析正确但你的域名是通过国内注册商注册的，你的域名因没有实名制而无法访问。<br>你认为配置没有问题，那么可能只是你的浏览器在捣鬼，可尝试清除浏览器缓存再访问或者换个浏览器访问。<br>也有可能是你的路由器缓存导致的错觉，所以也可以尝试换个局域网访问你的网站。<br>最有可能的原因是你下载的hexo有问题，导致所有的东西都上传到了github,而导致index页面在主域名的下一级目录。你可以尝试查看上传的内容，找到index页面，在域名后面添加下一级目录。若能访问index页面（此时样式可能是乱的），则证明是hexo安装有问题，笔者当时遇到的就是这个问题。可卸载重新安装。<br>注：1，2默认你的CNAME文件配置没有问题，如果没有绑定个人域名，则不需要CNAME文件。</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt; &lt;strong&gt;因为Hexo个人博客是托管在github之上，每次访问都要使用githubname.github.io这么一个长串的域名来
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git操作</title>
    <link href="http://jmu.name/2017/03/10/Git%E6%93%8D%E4%BD%9C/"/>
    <id>http://jmu.name/2017/03/10/Git操作/</id>
    <published>2017-03-10T04:21:43.000Z</published>
    <updated>2017-03-13T11:25:23.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用中遇到的问题"><a href="#使用中遇到的问题" class="headerlink" title="使用中遇到的问题"></a>使用中遇到的问题</h1><p><strong>最近更新了Git版本，发现在github上建立了一个仓库，然后关联本地库的时候pull失败，错误为fatal: refusing to merge unrelated histories，查找后找到了解决方案</strong></p><blockquote><p>将之前的git pull origin master修改为一下代码<br>git pull origin master –allow-unrelated-histories</p><h1 id="1-常用命令："><a href="#1-常用命令：" class="headerlink" title="1.常用命令："></a>1.常用命令：</h1><p>1)win+R:打开命令行<br>2)git –version:查看git的版本，知道git安装是否成功；<br>3）清除命令行：cls(window系统) clear(linux,mac);<br>4)ls -a:查看当前文件夹下所有的文件（隐藏+显示的文件夹）<br>5）添加远程通道：git remote add XXXX;<br>删除远程通道 git remote rm 通道名  </p></blockquote><h1 id="2-git配置："><a href="#2-git配置：" class="headerlink" title="2.git配置："></a>2.git配置：</h1><p>git config –global user.name “你的github用户名”<br>git config –global user.email “你的github邮箱”  </p><h1 id="3-创建一个git本地仓库："><a href="#3-创建一个git本地仓库：" class="headerlink" title="3.创建一个git本地仓库："></a>3.创建一个git本地仓库：</h1><pre><code>1、新建一个文件夹2、进入这个文件夹，右键git bash or 左手shift+右键“在此处打开命令窗口”3、git init :把本地仓库初始化为一个git可以管理的仓库；</code></pre><h1 id="4-建立远程仓库："><a href="#4-建立远程仓库：" class="headerlink" title="4.建立远程仓库："></a>4.建立远程仓库：</h1><pre><code>1.右上角“+”2.输入仓库名称- create</code></pre><h1 id="5-把“本地仓库”所有内容，推送到“远程仓库”-："><a href="#5-把“本地仓库”所有内容，推送到“远程仓库”-：" class="headerlink" title="5.把“本地仓库”所有内容，推送到“远程仓库” #："></a>5.把“本地仓库”所有内容，推送到“远程仓库” #：</h1><pre><code>1）git add .git add -Agit add --all2) git commit -m&quot;注释内容&quot;3) git push origin master</code></pre><h1 id="6-学员更新老师讲义（开发人员更新项目）"><a href="#6-学员更新老师讲义（开发人员更新项目）" class="headerlink" title="6.学员更新老师讲义（开发人员更新项目）"></a>6.学员更新老师讲义（开发人员更新项目）</h1><pre><code>1）登录自己的github，然后把老师讲义地址，复制到地址栏https://github.com/zhufengpeixun/Javascript201614.git2）把自己的远程仓库，下载到本地；git clone https://github.com/leilei1238/Javascript201614.git3)连接老师远程通道：git remote add teacher https://github.com/zhufengpeixun/Javascript201614.git查看链接了哪些通道：git remote -v删除远程通道：git remote rm 通道名称4)更新老师远程通道git remote update teachergit pull teacher master.......................................</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用中遇到的问题&quot;&gt;&lt;a href=&quot;#使用中遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;使用中遇到的问题&quot;&gt;&lt;/a&gt;使用中遇到的问题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;最近更新了Git版本，发现在github上建立了一个仓库，然后关联本地库的时
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js之内存释放</title>
    <link href="http://jmu.name/2017/03/10/js%E4%B9%8B%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE/"/>
    <id>http://jmu.name/2017/03/10/js之内存释放/</id>
    <published>2017-03-10T00:28:10.000Z</published>
    <updated>2017-03-10T11:09:42.526Z</updated>
    
    <content type="html"><![CDATA[<p><em>具体可查看高程三关于各类浏览器对内存的管理</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>有本事点我啊~~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //堆内存</span></span><br><span class="line"><span class="undefined">    //对象数据类型或者函数数据类型在定义的时候首先都会开辟一个堆内存,堆内存有一个引用的地址,如果外面有变量等知道了这个地址,我们就说这个内存被占用了,就不能销毁了</span></span><br><span class="line"><span class="undefined">    //    var obj1 = &#123;name: "张三"&#125;;</span></span><br><span class="line"><span class="undefined">    //    var obj2 = obj1;</span></span><br><span class="line"><span class="undefined">    //    //我们想要让堆内存释放/销毁,只需要把所有引用它的变量值赋值为null即可，如果当前的堆内存没有任何东西被占用了,那么浏览器会在空闲的时候把它销毁...</span></span><br><span class="line"><span class="undefined">    //    obj1 = null;</span></span><br><span class="line"><span class="undefined">    //    obj2 = null;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //栈内存</span></span><br><span class="line"><span class="undefined">    //1)全局作用域</span></span><br><span class="line"><span class="undefined">    //只有当页面关闭的时候全局作用域才会销毁</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //2)私有的作用域(只有函数执行会产生私有的作用域)</span></span><br><span class="line"><span class="undefined">    //一般情况下,函数执行会形成一个新的私有的作用域,当私有作用域中的代码执行完成后,我们当前作用域都会主动的进行释放和销毁</span></span><br><span class="line"><span class="undefined">    //但是还是存在特殊的情况的:</span></span><br><span class="line"><span class="undefined">    //当前私有作用域中的部分内存被作用域以外的东西占用了,那么当前的这个作用域就不能销毁了</span></span><br><span class="line"><span class="undefined">    //a、函数执行返回了一个引用数据类型的值,并且在函数的外面被一个其他的东西给接收了,这种情况下一般形成的私有作用域都不会销毁</span></span><br><span class="line"><span class="undefined">    //    function fn() &#123;</span></span><br><span class="line"><span class="undefined">    //        var num = 100;</span></span><br><span class="line"><span class="undefined">    //        return function () &#123;</span></span><br><span class="line"><span class="undefined">    //</span></span><br><span class="line"><span class="undefined">    //        &#125;</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined">    //    var f = fn();//fn执行形成的这个私有的作用域就不能再销毁了</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //b、在一个私有的作用域中给DOM元素的事件绑定方法,一般情况下我们的私有作用域都不销毁</span></span><br><span class="line"><span class="undefined">    //    var oDiv = document.getElementById("div1");</span></span><br><span class="line"><span class="undefined">    //    ~function () &#123;</span></span><br><span class="line"><span class="undefined">    //        oDiv.onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">    //</span></span><br><span class="line"><span class="undefined">    //        &#125;</span></span><br><span class="line"><span class="undefined">    //    &#125;();//当前自执行函数形成的这个私有的作用域也不销毁</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //c、下述情况属于不立即销毁-&gt;fn返回的函数没有被其他的东西占用,但是还需要执行一次呢,所以暂时不销毁,当返回的值执行完成后,浏览器会在空闲的时候把它销毁了 -&gt;"不立即销毁"</span></span><br><span class="line"><span class="undefined">    //    function fn() &#123;</span></span><br><span class="line"><span class="undefined">    //        var num = 100;</span></span><br><span class="line"><span class="undefined">    //        return function () &#123;</span></span><br><span class="line"><span class="undefined">    //</span></span><br><span class="line"><span class="undefined">    //        &#125;</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined">    //    fn()();//首先执行fn，返回一个小函数对应的内存地址，然后紧接着让返回的小函数再执行</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图解1"><a href="#图解1" class="headerlink" title="图解1"></a>图解1</h1><p><img src="http://i.imgur.com/TSXsukP.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;具体可查看高程三关于各类浏览器对内存的管理&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js之作用域</title>
    <link href="http://jmu.name/2017/03/10/js%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://jmu.name/2017/03/10/js之作用域/</id>
    <published>2017-03-10T00:26:22.000Z</published>
    <updated>2017-03-10T10:57:33.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何查找上级作用域"><a href="#如何查找上级作用域" class="headerlink" title="如何查找上级作用域"></a>如何查找上级作用域</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //如何查找当前作用域的上一级作用域?</span></span><br><span class="line"><span class="undefined">    //看当前函数是在哪个作用域下定义的,那么它的上级作用域就是谁-&gt;和函数在哪执行的没有任何的关系</span></span><br><span class="line"><span class="undefined">    var num = 12;</span></span><br><span class="line"><span class="undefined">    function fn() &#123;</span></span><br><span class="line"><span class="undefined">        var num = 120;</span></span><br><span class="line"><span class="undefined">        return function () &#123;</span></span><br><span class="line"><span class="undefined">            console.log(num);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    var f = fn();</span></span><br><span class="line"><span class="undefined">    f();//-&gt;120 上级作用域是A</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    ~function () &#123;</span></span><br><span class="line"><span class="undefined">        var num = 1200;</span></span><br><span class="line"><span class="undefined">        f();//-&gt;120 上级作用域是A</span></span><br><span class="line"><span class="undefined">    &#125;();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图解1"><a href="#图解1" class="headerlink" title="图解1"></a>图解1</h1><p><img src="http://i.imgur.com/8vQ72Rs.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何查找上级作用域&quot;&gt;&lt;a href=&quot;#如何查找上级作用域&quot; class=&quot;headerlink&quot; title=&quot;如何查找上级作用域&quot;&gt;&lt;/a&gt;如何查找上级作用域&lt;/h1&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js之预解释(二)</title>
    <link href="http://jmu.name/2017/03/10/js%E4%B9%8B%E9%A2%84%E8%A7%A3%E9%87%8A-%E4%BA%8C/"/>
    <id>http://jmu.name/2017/03/10/js之预解释-二/</id>
    <published>2017-03-10T00:23:50.000Z</published>
    <updated>2017-03-10T10:57:12.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="预解释中的变态机制"><a href="#预解释中的变态机制" class="headerlink" title="预解释中的变态机制"></a>预解释中的变态机制</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //预解释是毫无节操的一种机制</span></span><br><span class="line"><span class="undefined">    //自从学了预解释,从此节操是路人</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //in:"num" in window 判断num是否为window这个对象的一个属性,是的话返回true,不是的话返回false</span></span><br><span class="line"><span class="undefined">    //    var obj = &#123;name: "张文静", age: 17&#125;;</span></span><br><span class="line"><span class="undefined">    //    console.log("name" in obj);//-&gt;true</span></span><br><span class="line"><span class="undefined">    //    console.log("eat" in obj);//-&gt;false</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //1、预解释的时候不管你的条件是否成立,都要把带var的进行提前的声明</span></span><br><span class="line"><span class="undefined">    //window的预解释:var num; -&gt; window.num;</span></span><br><span class="line"><span class="undefined">    //    if (!("num" in window)) &#123;//"num" in window -&gt;true</span></span><br><span class="line"><span class="undefined">    //        var num = 12;</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined">    //    console.log(num);//-&gt;undefined</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //2、预解释的时候只预解释"="左边的,右边的是值,不参与预解释</span></span><br><span class="line"><span class="undefined">    //匿名函数之函数表达式:把函数定义的部分当做一个值赋值给我们的变量/元素的某一个事件</span></span><br><span class="line"><span class="undefined">    //window下的预解释:var fn;</span></span><br><span class="line"><span class="undefined">    //    fn();//-&gt; undefined() Uncaught TypeError: fn is not a function</span></span><br><span class="line"><span class="undefined">    //    var fn = function () &#123;</span></span><br><span class="line"><span class="undefined">    //        console.log("ok");</span></span><br><span class="line"><span class="undefined">    //    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //    fn(); -&gt;"ok"</span></span><br><span class="line"><span class="undefined">    //    function fn()&#123;</span></span><br><span class="line"><span class="undefined">    //        console.log("ok");</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined">    //    fn(); -&gt;"ok"</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //3、执行函数定义的那个function在全局作用域下不进行预解释,当代码执行到这个位置的时候定义和执行一起完成了</span></span><br><span class="line"><span class="undefined">    //自执行函数：定义和执行一起完成了</span></span><br><span class="line"><span class="undefined">    //    (function(num)&#123;&#125;)(100);</span></span><br><span class="line"><span class="undefined">    //    ~function(num)&#123;&#125;(100);</span></span><br><span class="line"><span class="undefined">    //    +function(num)&#123;&#125;(100);</span></span><br><span class="line"><span class="undefined">    //    -function(num)&#123;&#125;(100);</span></span><br><span class="line"><span class="undefined">    //    !function(num)&#123;&#125;(100);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //4、函数体中return下面的代码虽然不在执行了,但是需要进行预解释;return后面跟着的都是我们返回的值,所以不进行预解释;</span></span><br><span class="line"><span class="undefined">    //    function fn() &#123;</span></span><br><span class="line"><span class="undefined">    //        //预解释:var num;</span></span><br><span class="line"><span class="undefined">    //        console.log(num);//-&gt;undefined</span></span><br><span class="line"><span class="undefined">    //        return function () &#123;</span></span><br><span class="line"><span class="undefined">    //</span></span><br><span class="line"><span class="undefined">    //        &#125;;</span></span><br><span class="line"><span class="undefined">    //        var num = 100;</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined">    //    fn();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //5、在预解释的时候,如果名字已经声明过了,不需要从新的声明,但是需要重新的赋值;</span></span><br><span class="line"><span class="undefined">    //在JS中如果变量的名字和函数的名字重复了,也算冲突</span></span><br><span class="line"><span class="undefined">    //预解释:var fn; window.fn;   fn=xxxfff000 window.fn=xxxfff000</span></span><br><span class="line"><span class="undefined">    //    var fn = 13;</span></span><br><span class="line"><span class="undefined">    //    function fn() &#123;</span></span><br><span class="line"><span class="undefined">    //        console.log("ok");</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //window预解释:</span></span><br><span class="line"><span class="undefined">    //声明+定义 fn=xxxfff111</span></span><br><span class="line"><span class="undefined">    //声明 var fn; (不需要重新声明)</span></span><br><span class="line"><span class="undefined">    //声明(不重复进行)+定义 fn=xxxfff222</span></span><br><span class="line"><span class="undefined">    //-&gt;fn=xxxfff222</span></span><br><span class="line"><span class="undefined">    fn();//-&gt;2</span></span><br><span class="line"><span class="undefined">    function fn()&#123;console.log(1);&#125;;</span></span><br><span class="line"><span class="undefined">    fn();//-&gt;2</span></span><br><span class="line"><span class="undefined">    var fn=10;//-&gt;fn=10</span></span><br><span class="line"><span class="undefined">    // fn();//-&gt;10() Error:fn is not a function</span></span><br><span class="line"><span class="undefined">    function fn()&#123;console.log(2);&#125;;</span></span><br><span class="line"><span class="undefined">    fn();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;预解释中的变态机制&quot;&gt;&lt;a href=&quot;#预解释中的变态机制&quot; class=&quot;headerlink&quot; title=&quot;预解释中的变态机制&quot;&gt;&lt;/a&gt;预解释中的变态机制&lt;/h1&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js之预解释(一)</title>
    <link href="http://jmu.name/2017/03/09/js%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>http://jmu.name/2017/03/09/js第一天/</id>
    <published>2017-03-09T12:06:05.000Z</published>
    <updated>2017-03-10T10:57:24.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="预解释"><a href="#预解释" class="headerlink" title="预解释"></a>预解释</h1><p>1.为何学习预解释？–理解即可  </p><ul><li>1.避免很多不规范的写法；<br>  2.带var和不带var是有区别的；<br>  3.代码写在里面和外面是有区别的；<br>2.什么是预解释？<br> 在当前作用域下，在JS代码执行之前，浏览器会对带var和带function的，进行提前声明或定义；<br>3.关于预解释：带var和带function不同：<br>1）带var：只声明不定义；var a;告诉浏览器有个变量叫a，关于a的内容并不知道；<br>2）带function:声明+定义； var fn=xxff00;<br>4.函数执行四阶段：<br>1）形成一个私有作用域<br>2）形参赋值<br>3）预解释：<br>4）代码从上到下的执行；<br>5.作用于链：<br>当函数被调用的时候，会形成一个私有作用域，我们看该私有作用域下，是否有私有变量A：<br>1）如果有私有变量A：那么该作用域中的A，都是私有变量，跟外界没有任何关系<br>2）如果没有私有变量A：到上级作用域进行查找，如果没有，继续往上找，找到window全局作用域还没有的话，报错；<br>6.带var和不带var的区别：<br>1）带var:1)在全局环境下，属于window的全局属性 2）带var会进行预解释<br>2）不带var：1)属于window的全局属性 2)不带var不会进行预解释；<br>7.私有变量有2种：<br>1）当前作用域下，带var的;<br>2）形参；<br>8.栈内存和堆内存：<br>栈内存：提供了一个供JS代码执行的环境；（里面可以放轻量级的数据：基本数据类型）<br>  全局作用域 和  私有作用域；<br>堆内存：堆内存用来存放引用数据类型；<br>  对象数据类型：键值对<br>  函数数据类型：代码字符串<br>9.预解释无节操：<br>1）只对等号左边带var的，声明但不定义；<br>2) 已经声明过的，不会进行重复声明，但会重新赋值<br>3）在预解释阶段，函数的优先级大于变量；  </li></ul><p>​<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //JS中的数据类型:</span></span><br><span class="line"><span class="undefined">    //基本数据类型</span></span><br><span class="line"><span class="undefined">    //number、string、boolean、null、undefined</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //引用数据类型</span></span><br><span class="line"><span class="undefined">    //object : &#123;&#125;、[]、/^$/、Date</span></span><br><span class="line"><span class="undefined">    //function</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //    var num = 12;</span></span><br><span class="line"><span class="undefined">    //    var obj = &#123;name: "LaoJI", age: 7&#125;;</span></span><br><span class="line"><span class="undefined">    //    function fn() &#123;</span></span><br><span class="line"><span class="undefined">    //        console.log("勿忘初心方得始终~~");</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined">    //    console.log(fn);//-&gt;把整个函数的定义部分(函数本身)在控制台输出</span></span><br><span class="line"><span class="undefined">    //    console.log(fn());//-&gt;把当前函数执行的返回结果(return后面写的是啥,返回值就是啥,如果没有return,默认返回值是undefined)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //1、当浏览器加载HTML页面的时候,首先会提供一个供全局JS代码执行的环境-&gt;全局作用域(global/window)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //2、预解释(变量提声)</span></span><br><span class="line"><span class="undefined">    //在当前的作用域中,JS代码执行之前,浏览器首先会默认的把所有带var和function的进行提前的声明或者定义</span></span><br><span class="line"><span class="undefined">    //1)理解声明和定义</span></span><br><span class="line"><span class="undefined">    //var num=12;</span></span><br><span class="line"><span class="undefined">    //声明(declare):var num; -&gt;告诉浏览器在全局作用域中有一个num的变量了  -&gt;如果一个变量只是声明了但是没有赋值,默认的值是undefined</span></span><br><span class="line"><span class="undefined">    //定义(defined):num=12; -&gt;给我们的变量进行赋值</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //2)对于带var和function关键字的在预解释的时候操作还是不一样的</span></span><br><span class="line"><span class="undefined">    //var -&gt; 在预解释的时候只是提前的声明</span></span><br><span class="line"><span class="undefined">    //function -&gt;在预解释的时候提前的声明+定义都完成了</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //3)预解释只发生在当前的作用域下,例如:开始只对window下的进行预解释,只有函数执行的时候才会对函数中的进行预解释</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log(num);//-&gt;undefined</span></span><br><span class="line"><span class="undefined">    var num = 12;</span></span><br><span class="line"><span class="undefined">    console.log(num);//-&gt;12</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var obj = &#123;name: "LaoJI", age: 7&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    fn(100,200);//-&gt;可以在上面执行,因为预解释的时候声明+定义就已经完成了</span></span><br><span class="line"><span class="undefined">    function fn(num1, num2) &#123;</span></span><br><span class="line"><span class="undefined">        var total = num1 + num2;</span></span><br><span class="line"><span class="undefined">        console.log(total);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //3、JS中内存的分类</span></span><br><span class="line"><span class="undefined">    //栈内存:用来提供一个供JS代码执行的环境 -&gt;作用域(全局作用域/私有的作用域)</span></span><br><span class="line"><span class="undefined">    //堆内存:用来存储引用数据类型的值 -&gt;对象存储的是属性名和属性值,函数存储的是代码字符串...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>图解1</strong><br>    <img src="http://i.imgur.com/uknGYyt.png" alt="图解1"><br><strong>图解2</strong><br>    <img src="http://i.imgur.com/mZhkLkN.png" alt=""></p><h1 id="关于私有作用域的预解释"><a href="#关于私有作用域的预解释" class="headerlink" title="关于私有作用域的预解释"></a>关于私有作用域的预解释</h1><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //1、如何区分私有变量和全局变量?</span></span><br><span class="line"><span class="undefined">    //1)在全局作用域下声明(预解释的时候)的变量是全局变量;</span></span><br><span class="line"><span class="undefined">    //2)在"私有作用域中声明的变量"和"函数的形参"都是私有的变量;</span></span><br><span class="line"><span class="undefined">    //在私有作用域中,我们代码执行的时候遇到了一个变量,首先我们需要确定它是否为私有的变量,如果是私有的变量,那么和外面的没有任何的关系；如果不是私有的,则往当前作用域的上级作用域进行查找,如果上级作用域也没有则继续查找,一直找到window为止...(作用域链)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //2、当函数执行的时候(直接目的:让函数体中的代码执行),首先会形成一个新的私有的作用域,然后按照如下的步骤执行:</span></span><br><span class="line"><span class="undefined">    //1)如果有形参,先给形参赋值</span></span><br><span class="line"><span class="undefined">    //2)进行私有作用域中的预解释</span></span><br><span class="line"><span class="undefined">    //3)私有作用域中的代码从上到下执行</span></span><br><span class="line"><span class="undefined">    //...</span></span><br><span class="line"><span class="undefined">    //函数形成一个新的私有的作用域保护了里面的私有变量不受外界的干扰(外面修改不了私有的,私有的也修改不了外面的)--&gt;"闭包"</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //    console.log(total);//-&gt;undefined</span></span><br><span class="line"><span class="undefined">    //    var total = 0;</span></span><br><span class="line"><span class="undefined">    //    function fn(num1, num2) &#123;</span></span><br><span class="line"><span class="undefined">    //        console.log(total);//-&gt;undefined</span></span><br><span class="line"><span class="undefined">    //        var total = num1 + num2;</span></span><br><span class="line"><span class="undefined">    //        console.log(total);//-&gt;300</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined">    //    fn(100, 200);</span></span><br><span class="line"><span class="undefined">    //    console.log(total);//-&gt;0</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log(total);//-&gt;undefined</span></span><br><span class="line"><span class="undefined">    var total = 0;</span></span><br><span class="line"><span class="undefined">    function fn(num1, num2) &#123;</span></span><br><span class="line"><span class="undefined">        console.log(total);//-&gt;total不是私有的,找全局下的total,也就是在这里出现的所有的total其实应该都是全局的 -&gt;0</span></span><br><span class="line"><span class="undefined">        total = num1 + num2;//-&gt;全局的total=300</span></span><br><span class="line"><span class="undefined">        console.log(total);//-&gt;300</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    fn(100, 200);</span></span><br><span class="line"><span class="undefined">    console.log(total);//-&gt;300</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p><strong>图解3</strong><br><img src="http://i.imgur.com/wt4CFKc.png" alt=""></p><h1 id="全局作用域下var带和不带的区别"><a href="#全局作用域下var带和不带的区别" class="headerlink" title="全局作用域下var带和不带的区别"></a>全局作用域下var带和不带的区别</h1>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //在全局作用域中,带var和不带var的关系?</span></span><br><span class="line"><span class="undefined">    //区别:带var的可以进行预解释,所以在赋值的前面执行不会报错；不带var的是不能进行预解释的,在前面执行会报错；</span></span><br><span class="line"><span class="undefined">    //    console.log(num);//-&gt;undefined</span></span><br><span class="line"><span class="undefined">    //    var num = 12;</span></span><br><span class="line"><span class="undefined">    //</span></span><br><span class="line"><span class="undefined">    //    console.log(num2);//-&gt;Uncaught ReferenceError: num2 is not defined</span></span><br><span class="line"><span class="undefined">    //    num2 = 12;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //关系:num2=12 -&gt; 相当于给window增加了一个叫做num2的属性名,属性值是12</span></span><br><span class="line"><span class="undefined">    //var num = 12; -&gt;首先它相当于给全局作用域增加了一个全局变量num,但是不仅如此,它也相当于给window增加了一个属性名num,属性值是12</span></span><br><span class="line"><span class="undefined">    //    var num = 12;</span></span><br><span class="line"><span class="undefined">    //    console.log(num);//-&gt;12</span></span><br><span class="line"><span class="undefined">    //</span></span><br><span class="line"><span class="undefined">    //    num2 = 12;</span></span><br><span class="line"><span class="undefined">    //    console.log(num2);//-&gt;12 window.num2</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //    var total = 0;</span></span><br><span class="line"><span class="undefined">    //    function fn() &#123;</span></span><br><span class="line"><span class="undefined">    //        console.log(total);//-&gt;0</span></span><br><span class="line"><span class="undefined">    //        total = 100;</span></span><br><span class="line"><span class="undefined">    //    &#125;</span></span><br><span class="line"><span class="undefined">    //    fn();</span></span><br><span class="line"><span class="undefined">    //    console.log(total);//-&gt;100</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //私有作用域中出现的一个变量不是私有的,则往上级作用域进行查找,上级没有则继续向上查找,一直找到window为止,如果window下也没有呢?</span></span><br><span class="line"><span class="undefined">    //我们是获取值:console.log(total);  -&gt;报错了</span></span><br><span class="line"><span class="undefined">    //我们是设置值:total = 100; -&gt;相当于给window增加了一个属性名total,属性值是100</span></span><br><span class="line"><span class="undefined">    function fn() &#123;</span></span><br><span class="line"><span class="undefined">        //console.log(total);//-&gt;Uncaught ReferenceError: total is not defined</span></span><br><span class="line"><span class="undefined">        total = 100;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    fn();</span></span><br><span class="line"><span class="undefined">    console.log(total);//-&gt;100</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    //JS中如果在不进行任何特殊处理的情况下,上面的代码报错,下面的代码都不在执行了</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;预解释&quot;&gt;&lt;a href=&quot;#预解释&quot; class=&quot;headerlink&quot; title=&quot;预解释&quot;&gt;&lt;/a&gt;预解释&lt;/h1&gt;&lt;p&gt;1.为何学习预解释？–理解即可  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.避免很多不规范的写法；&lt;br&gt;  2.带var和不带var是有区别
      
    
    </summary>
    
    
  </entry>
  
</feed>
